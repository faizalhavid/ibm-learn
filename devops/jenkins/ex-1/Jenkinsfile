pipeline {

    // Environment Instruction
    // environment is used to set environment variables for the pipeline
    // environment {
    //     MY_ENV_VAR = 'my_value'
    // }

    // Credential Instruction
    // credentials are used to set credentials for the pipeline

    environment {
       AUTHOR = 'John Doe'
       APP = credentials('credential_test')
    } 


    //  Agent Instruction
    //agent any
    // agent {
    //     node {
    //         // its mean use expression 
    //         label "wsl || linux && debian"
    //     }
    // }
    // if agent set the none, we can set each stage with different agent
    agent none

    //  Options Instruction
    options {
        // timeout is used to set the timeout for the pipeline
        // timeout(time: 5, unit: 'MINUTES')
        // timestamps is used to add timestamps to the logs
        timestamps()
        // disableConcurrentBuilds is used to disable concurrent builds
        disableConcurrentBuilds()
        // buildDiscarder is used to set the number of builds to keep
        buildDiscarder(logRotator(numToKeepStr: '5'))
        // timeout is used to set the timeout for the pipeline
        timeout(time: 5, unit: 'SECONDS')
        // for complete list of options, you can see in doc https://www.jenkins.io/doc/book/pipeline/syntax/#options
    }
    
    // Stages Instruction
    // stages are the main part of the pipeline, if any stage fails, the pipeline will stop and will continue to the post actions
    stages {
        stage('Build') {
            agent {
                node {
                    // its mean use expression 
                    label "wsl || linux && debian"
                }
            }
            //  Steps Instruction
            // steps are the commands that will be executed in the stage
            // steps are the main part of the stage, if any step fails, the stage will fail and the pipeline will stop
            steps {
                // Script Instruction
                // script is used to run a block of code in the pipeline
                script{
                    for (int i = 0; i < 10; i++) {
                        echo "Hello World ${i}"
                    }
                    // Pipeline utility steps
                    // in Jenkins web UI, you need to install the plugin "Pipeline Utility Steps" to use this function
                    // for all utility steps, you can see in doc https://www.jenkins.io/doc/pipeline/steps/pipeline-utility-steps/
                    def data = [
                        "firstName" : "John",
                        "lastName" : "Doe"
                    ]
                    writeJSON (file: 'data.json', json: data)
                    
                }
                echo 'Building...'
                // sleep(5)
                sh("cd devops/jenkins/spring-project ; chmod +x mvnw ;  ./mvnw clean compile package")
                //  we can call the environment variable in the pipeline
                echo "Build completed! By $AUTHOR"
                //  we can call the global variable in the pipeline
                echo "Job $env.JOB_NAME"
                // withCredentials([usernamePassword(credentialsId: 'credential_test', passwordVariable: 'APP_PWD', usernameVariable: 'APP_USR')]) {
                //     echo "Build number $APP_USR"
                //     echo "Build number $APP_PWD"
                //     sh('echo "withCredentials : username - $APP_USR , password - $APP_PWD" > "credentials2.txt"')
                // }
                // echo "Build number $APP_USR"
                // echo "Build number $APP_PWD"
                // sh('echo "credentials : username - $APP_USR , password - $APP.PWD" > "credentials.txt"')
            }
        }
        stage('Test') {
            agent {
                node {
                    // its mean use expression 
                    label "wsl || linux && debian"
                }
            }
            steps {
                echo 'Testing...'
                // sleep(5)
                sh("cd devops/jenkins/spring-project ; chmod +x mvnw ;  ./mvnw test")
                echo 'Test completed!'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying...'
                sleep(5)
                echo 'Deploy completed!'
            }
        }
    }

    // Post Actions Instruction
    post {
        always {
            echo 'This will always run after the stages.'
        }
        success {
            echo 'This will run only if the pipeline is successful.'
        }
        failure {
            echo 'This will run only if the pipeline fails.'
        }
        cleanup {
            echo 'This will run after the pipeline, regardless of success or failure.'
        }
    }
}